class MovementObject {
    vec3 position;
    vec3 velocity;
    bool visible;
    int no_grab;
    string char_path;
    bool controlled;
    bool is_player;
    bool static_char;
    int controller_id;
    int update_script_counter;
    int update_script_period;
    bool focused_character;
    RiggedObject@ rigged_object();
    void SetScriptUpdatePeriod(int steps); // Script update() is called every X engine timesteps
    bool HasFunction(const string &in function_definition);
    int QueryIntFunction(string function);
    void Execute(string code);
    bool HasVar(string var_name);
    int GetIntVar(string var_name);
    int GetArrayIntVar(const string &in var_name, int index);
    float GetFloatVar(string var_name);
    bool GetBoolVar(string var_name);
    bool OnSameTeam(MovementObject@ other);
    void ReceiveMessage(const string &in);
    void ReceiveScriptMessage(const string &in);
    void QueueScriptMessage(const string &in);
    int GetID();
    void SetRotationFromFacing(vec3 facing);
    void FixDiscontinuity();
    string GetCurrentControlScript();
    string GetActorScript();
    string GetNPCObjectScript();
    string GetPCObjectScript();
    string GetNPCScript();
    string GetPCScript();
    void ChangeControlScript(const string &path);
    void AddToAttackHistory(const string &in attack_path);
    float CheckAttackHistory(const string &in attack_path);
    void ClearAttackHistory();
    int WasHit(string type, string attack_path, vec3 dir, vec3 pos, int attacker_id, float attack_damage_mult, float attack_knockback_mult);
    void WasBlocked();
    float GetTempHealth();
    void Ragdoll();
    void ApplyForce(vec3 force);
    vec3 GetFacing();
    void UnRagdoll();
    void SetAnimation(string anim_path);
    void SetAnimAndCharAnim(string anim_path, float transition_speed, int8 flags, string char_anim);
    void SwapAnimation(string anim_path);
    void SetAnimation(string anim_path, float transition_speed);
    void SetAnimation(string anim_path, float transition_speed, int8 flags);
    void OverrideCharAnim(const string &in char_anim, const string &in anim_path);
    void SetCharAnimation(string char_anim, float transition_speed, int8 flags);
    void SetCharAnimation(string char_anim, float transition_speed);
    void SetCharAnimation(string char_anim);
    void MaterialEvent(string event, vec3 position);
    void MaterialEvent(string event, vec3 position, float audio_gain);
    void PlaySoundGroupAttached(string path, vec3 position);
    void PlaySoundAttached(string path, vec3 position);
    void PlaySoundGroupVoice(string voice_key, float delay);
    void ForceSoundGroupVoice(string voice_key, float delay);
    void StopVoice();
    vec4 GetAvgRotationVec4();
    int getID();
    void AttachItemToSlot(int item_id, int attachment_type, bool mirrored);
    void DetachItem(int item_id);
    void DetachAllItems();
    void MaterialParticleAtBone(string type, string IK_label);
    void MaterialParticle(const string &in type, const vec3 &in pos, const vec3 &in vel);
    void RecreateRiggedObject(string character_path);
    int GetWaypointTarget();
    void UpdateWeapons();
    void CDrawArms(const BoneTransform &in chest_transform, const BoneTransform &in l_hand_transform, const BoneTransform &in r_hand_transform, int num_frames);
    void CDrawEar(bool right, const BoneTransform &in head_transform, int num_frames);
    void CDrawTail(int num_frames);
    void CFireRibbonUpdate(C_ACCEL @, float delta_time, float curr_game_time);
};
